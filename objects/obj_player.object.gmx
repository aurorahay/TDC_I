<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
grav = 0.2;
hsp = 0;
hsp_carry = 0;
vsp = 0;
movespeed = 4;
jumps = 0;
jumpsmax = 2;

jumpspeed_normal = 7;
jumpspeed_powerup = 10;

jumpspeed = jumpspeed_normal;

if (global.checkpointR == room) {
    x = global.checkpointx;
    y = global.checkpointy;
}

key_down = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>jumpspeed = jumpspeed_normal
sprite_index = spr_player
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controller
if (global.pause) {
    exit;
}

//Get player input
key_right = keyboard_check(vk_right) || keyboard_check(ord("D"));
//key_right = keyboard_check(ord("D"));
key_left = -(keyboard_check(vk_left) || keyboard_check(ord("A")));
//key_left = -keyboard_check(ord("A"));
key_down = keyboard_check(vk_down) || keyboard_check(ord("S"));
key_jump = keyboard_check_pressed(vk_space);
key_jump_held = keyboard_check(vk_space);

//React to inputs
move = key_left + key_right;

hsp = move * movespeed;
if (vsp &lt; 10) {
    vsp += grav;
}

if (place_meeting(x, y + 1, obj_wall)) {
    jumps = jumpsmax;    
}

if (key_jump) &amp;&amp; (jumps &gt;0) {
    jumps -= 1;
    vsp = -jumpspeed;
}

if (key_jump) &amp;&amp; (place_meeting(x+1, y, obj_wall) || place_meeting(x-1, y, obj_wall)) {
    vsp = -jumpspeed;
}

if (vsp &lt; 0) &amp;&amp; (!key_jump_held) {
    vsp = max(vsp, -jumpspeed / 2);
}

var hsp_final = hsp + hsp_carry;
hsp_carry = 0;
//Horizontal Collision
if (place_meeting(x + hsp, y, obj_wall)) {
    while(!place_meeting(x+sign(hsp_final), y, obj_wall)) {
        x += sign(hsp_final);
    }
    
    hsp_final = 0;
    hsp = 0;
}

//Vertical Collision
if (place_meeting(x, y + vsp, obj_wall)) {
    while(!place_meeting(x, y + sign(vsp), obj_wall)) {
        y += sign(vsp);
    }
    
    vsp = 0;
}

x += hsp_final;
y += vsp;

//Animate
if (move != 0) {
    image_xscale = move;
}

if (place_meeting(x, y+1, obj_wall)) {
    if (hsp != 0) {
        sprite_index = spr_player_run;        
    } else {
        sprite_index = spr_player_idle;
    }
} else {
    if (vsp &lt; 0) {
        sprite_index = spr_player_jump;
    } else {
        sprite_index = spr_player_fall;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
